#!/bin/bash

# Functions for commands
file_edit() { nano "$1"; }
run_command() { sudo "$@"; }
cleanup_spacer() { sudo apt-get clean && sudo rm -rf /tmp/* && echo "Cleaned up!"; }
health_check() { echo "CPU Load:"; uptime; echo "Memory Usage:"; free -h; echo "Disk Usage:"; df -h; }
find_large_files() { find / -type f -size +"$1" 2>/dev/null; }
list_installed_software() { dpkg --get-selections | grep -v deinstall; }
view_permissions() { ls -l "$1"; }
delete_file() { rm -i "$1"; echo "File deleted!"; }
check_disk_usage() { df -h; }
process_list() { ps aux; }
uptime_check() { uptime; }
cpu_info() { lscpu | grep "Model name"; }
memory_info() { free -h; }
quick_note() { echo "$1" >> notes.txt; echo "Note saved: $1"; }
view_notes() { cat notes.txt; }
system_reboot() { sudo reboot; }
create_folder() { mkdir -p "$1" && echo "Folder '$1' created."; }
delete_folder() { rmdir "$1" && echo "Folder '$1' deleted."; }
show_time() { date; }
show_ip() { hostname -I | awk '{print $1}'; }
ping_test() { ping -c 4 "$1"; }
backup_file() { cp "$1" "$1.bak" && echo "Backup created: $1.bak"; }
top_cpu_processes() { ps -eo pid,comm,%cpu --sort=-%cpu | head -n 10; }
top_mem_processes() { ps -eo pid,comm,%mem --sort=-%mem | head -n 10; }
kernel_version() { uname -r; }
update_finner() {
    echo "Updating Finner..."
    curl -o /usr/local/bin/Finner https://raw.githubusercontent.com/Extreme6914144/Finner/main/Finner%20code
    chmod +x /usr/local/bin/Finner
    echo "Finner updated to the latest version!"
}
file_stat() { stat "$1"; }
show_syslog() { tail -n 20 /var/log/syslog; }
check_port() { sudo netstat -tuln | grep ":$1"; }
list_users() { who; }
fetch_weather() {
    city="$1"
    curl -s "wttr.in/$city?format=3" || echo "Could not fetch weather. Check your internet."
}
run_speedtest() {
    curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python3 -
}
list_services() { systemctl list-units --type=service --state=running; }
find_file() { find / -name "$1" 2>/dev/null; }
calculate() { echo "$1" | bc; }
lock_screen() { gnome-screensaver-command -l || echo "Lock screen command not supported on this system."; }
show_mounts() { mount | column -t; }
unmount_drive() { sudo umount "$1" && echo "Drive $1 unmounted."; }
kill_process() { sudo kill "$1" && echo "Process $1 killed."; }
change_hostname() { sudo hostnamectl set-hostname "$1" && echo "Hostname changed to $1"; }
last_boot() { who -b; }
add_user() { sudo adduser "$1"; }
delete_user() { sudo deluser "$1"; }
show_netstat() { netstat -tuln; }
wifi_scan() { sudo iwlist wlan0 scan | grep 'ESSID'; }
system_summary() {
    echo "System Information:"
    echo "--------------------"
    echo "Hostname: $(hostname)"
    echo "IP Address: $(hostname -I | awk '{print $1}')"
    echo "Uptime: $(uptime -p)"
    echo "Kernel Version: $(uname -r)"
    echo "CPU: $(lscpu | grep 'Model name' | awk -F: '{print $2}')"
    echo "Memory Usage:"
    free -h
    echo "Disk Usage:"
    df -h
}
random_password() { tr -dc A-Za-z0-9 </dev/urandom | head -c 16 && echo; }
network_speed() { ethtool $(ip route | grep '^default' | awk '{print $5}') | grep "Speed"; }
disk_health() { sudo smartctl -H /dev/sda | grep "SMART overall-health"; }
list_cronjobs() { crontab -l || echo "No cron jobs found."; }
add_cronjob() { (crontab -l 2>/dev/null; echo "$2 $3") | crontab - && echo "Cron job added."; }
temp_monitor() { vcgencmd measure_temp; }
battery_status() { upower -i $(upower -e | grep BAT) | grep -E "state|percentage"; }
wifi_info() { iwconfig wlan0; }
open_ports() { sudo lsof -i -P -n | grep LISTEN; }
connected_devices() { arp -a; }
remote_shutdown() { ssh "$1" "sudo shutdown now" && echo "Shutdown signal sent to $1."; }

# Command Handler
case "$1" in
    f) file_edit "$2";;
    c) run_command "${@:2}";;
    clean) cleanup_spacer;;
    health) health_check;;
    big) find_large_files "$2";;
    soft) list_installed_software;;
    perms) view_permissions "$2";;
    del) delete_file "$2";;
    disk) check_disk_usage;;
    ps) process_list;;
    uptime) uptime_check;;
    cpu) cpu_info;;
    mem) memory_info;;
    quicknote) quick_note "$2";;
    notes) view_notes;;
    reboot) system_reboot;;
    mkdir) create_folder "$2";;
    rmdir) delete_folder "$2";;
    time) show_time;;
    ip) show_ip;;
    ping) ping_test "$2";;
    backup) backup_file "$2";;
    topcpu) top_cpu_processes;;
    topmem) top_mem_processes;;
    kernel) kernel_version;;
    fstat) file_stat "$2";;
    syslog) show_syslog;;
    checkport) check_port "$2";;
    users) list_users;;
    weather) fetch_weather "$2";;
    speedtest) run_speedtest;;
    services) list_services;;
    findfile) find_file "$2";;
    calc) calculate "$2";;
    lockscreen) lock_screen;;
    mounts) show_mounts;;
    unmount) unmount_drive "$2";;
    kill) kill_process "$2";;
    hostname) change_hostname "$2";;
    lastboot) last_boot;;
    adduser) add_user "$2";;
    deluser) delete_user "$2";;
    netstat) show_netstat;;
    wifi) wifi_scan;;
    sysinfo) system_summary;;
    update) update_finner;;
    randpass) random_password;;
    netspeed) network_speed;;
    diskhealth) disk_health;;
    cronlist) list_cronjobs;;
    addcron) add_cronjob "$2" "$3";;
    temp) temp_monitor;;
    battery) battery_status;;
    wifiinfo) wifi_info;;
    ports) open_ports;;
    devices) connected_devices;;
    rshutdown) remote_shutdown "$2";;
    help)
        echo "Finner Commands:"
        echo "  randpass            - Generate a random password"
        echo "  netspeed            - Check network speed"
        echo "  diskhealth          - Show disk health"
        echo "  cronlist            - List all cron jobs"
        echo "  addcron <time> <cmd> - Add a new cron job"
        echo "  temp                - Monitor Raspberry Pi temperature"
        echo "  battery             - Show battery status"
        echo "  wifiinfo            - Display detailed Wi-Fi info"
        echo "  ports               - Show all open ports"
        echo "  devices             - Show connected network devices"
        echo "  rshutdown <ip>      - Remotely shut down a device"
        echo "Use 'Finner help' to see all commands."
        ;;
    *)
        echo "Invalid command. Use 'Finner help' to see all commands."
        ;;
esac
