#!/bin/bash

# Functions for advanced commands
ai_chat() {
    if [[ -z "$1" ]]; then
        echo "Usage: Finner chat <message>"
        return
    fi
    echo "AI Response: Thinking..."
    python3 -c "import openai; openai.api_key='YOUR_API_KEY'; response=openai.ChatCompletion.create(model='gpt-4', messages=[{'role': 'user', 'content': '$1'}]); print(response['choices'][0]['message']['content'])"
}

monitor_resources() {
    echo "Monitoring system resources... Press Ctrl+C to stop."
    while true; do
        clear
        echo "CPU Usage:"
        top -b -n1 | grep "Cpu(s)"
        echo "Memory Usage:"
        free -h
        echo "Disk Usage:"
        df -h
        sleep 5
    done
}

image_enhance() {
    input_image="$1"
    output_image="${2:-enhanced_$input_image}"
    if [[ -z "$input_image" ]]; then
        echo "Usage: Finner enhance <input_image> [output_image]"
        return
    fi
    python3 -c "
from PIL import Image, ImageEnhance
image = Image.open('$input_image')
enhancer = ImageEnhance.Sharpness(image)
enhanced_image = enhancer.enhance(2.0)
enhanced_image.save('$output_image')
"
    echo "Enhanced image saved as $output_image"
}

translate_text() {
    text="$1"
    target_lang="${2:-en}"
    if [[ -z "$text" ]]; then
        echo "Usage: Finner translate <text> [target_language]"
        return
    fi
    python3 -c "from googletrans import Translator; translator = Translator(); print(translator.translate('$text', dest='$target_lang').text)"
}

advanced_backup() {
    src="$1"
    dest="${2:-/backup}"
    if [[ -z "$src" ]]; then
        echo "Usage: Finner backup-adv <source_directory> [destination_directory]"
        return
    fi
    rsync -av --progress "$src" "$dest"
    echo "Advanced backup completed to $dest"
}

face_detect() {
    image="$1"
    if [[ -z "$image" ]]; then
        echo "Usage: Finner face-detect <image>"
        return
    fi
    python3 -c "
import cv2
image_path = '$image'
cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
image = cv2.imread(image_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
faces = cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))
for (x, y, w, h) in faces:
    cv2.rectangle(image, (x, y), (x+w, y+h), (255, 0, 0), 2)
output = 'detected_faces.jpg'
cv2.imwrite(output, image)
print(f'Detected faces saved as {output}')
"
}

crypto_prices() {
    if [[ -z "$1" ]]; then
        echo "Fetching top 5 cryptocurrency prices..."
        curl -s https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd | jq '.[:5] | .[] | {name: .name, price: .current_price}'
    else
        echo "Fetching price for $1..."
        curl -s https://api.coingecko.com/api/v3/simple/price?ids=$1&vs_currencies=usd | jq
    fi
}

network_scan() {
    echo "Scanning network for devices..."
    sudo nmap -sP 192.168.1.0/24
}

iot_control() {
    device_id="$1"
    action="$2"
    if [[ -z "$device_id" || -z "$action" ]]; then
        echo "Usage: Finner iot <device_id> <action>"
        return
    fi
    echo "Sending command to IoT device $device_id to perform $action..."
    python3 -c "import requests; requests.post('http://iot-device-url/$device_id', data={'action': '$action'})"
}

# Command handler
case "$1" in
    chat) ai_chat "${@:2}";;
    monitor) monitor_resources;;
    enhance) image_enhance "$2" "$3";;
    translate) translate_text "$2" "$3";;
    backup-adv) advanced_backup "$2" "$3";;
    face-detect) face_detect "$2";;
    crypto) crypto_prices "$2";;
    net-scan) network_scan;;
    iot) iot_control "$2" "$3";;
    help)
        echo "Finner  Commands:"
        echo "  chat <message> - Ask the AI a question"
        echo "  monitor - Monitor system resources in real-time"
        echo "  enhance <image> [output] - Enhance image sharpness"
        echo "  translate <text> [language] - Translate text into another language"
        echo "  backup-adv <source> [destination] - Perform advanced backups with rsync"
        echo "  face-detect <image> - Detect faces in an image"
        echo "  crypto [crypto_name] - Get cryptocurrency prices"
        echo "  net-scan - Scan the network for devices"
        echo "  iot <device_id> <action> - Control IoT devices"
        echo "  search <query> - Search the web for the query"
        echo "  download <url> [output] - Download a file from the internet"
        echo "  compress <archive> <files>... - Compress files into an archive"
        echo "  extract <archive> - Extract a compressed archive"
        echo "  f <file>              - Edit or create a file"
        echo "  c <command>           - Run a command with sudo"
        echo "  clean                 - Clean system files"
        echo "  health                - Show system health"
        echo "  big <size>            - Find large files"
        echo "  soft                  - List installed software"
        echo "  perms <file>          - View file permissions"
        echo "  del <file>            - Delete a file"
        echo "  disk                  - Show disk usage"
        echo "  ps                    - Show running processes"
        echo "  uptime                - Show system uptime"
        echo "  cpu                   - Display CPU details"
        echo "  mem                   - Display memory usage"
        echo "  quicknote <text>      - Save a quick note"
        echo "  notes                 - View all saved notes"
        echo "  reboot                - Reboot the system"
        echo "  mkdir <folder>        - Create a new folder"
        echo "  rmdir <folder>        - Delete an empty folder"
        echo "  time                  - Show current date and time"
        echo "  ip                    - Show system IP address"
        echo "  ping <url>            - Ping a website or server"
        echo "  backup <file>         - Backup a file"
        echo "  topcpu                - Show top 10 CPU-consuming processes"
        echo "  topmem                - Show top 10 memory-consuming processes"
        echo "  kernel                - Show Linux kernel version"
        echo "  mounts                - Show mounted drives"
        echo "  unmount <drive>       - Unmount a drive"
        echo "  kill <pid>            - Kill a process"
        echo "  hostname <name>       - Change system hostname"
        echo "  lastboot              - Show last boot time"
        echo "  adduser <username>    - Add a new user"
        echo "  deluser <username>    - Delete an existing user"
        echo "  netstat               - Show network connections"
        echo "  wifi                  - Show available Wi-Fi networks"
        echo "  sysinfo               - Display system summary"
        echo "  update                - Update Finner to the latest version"
        ;;
    *)
        echo "Invalid command. Use 'Finner help' to see all commands."
        ;;
esac
